From 3afaefdcd56d355f5e780f520715603a75b1ebcc Mon Sep 17 00:00:00 2001
From: Daniel Green <venix1@gmail.com>
Date: Fri, 21 Jun 2013 17:27:36 -0500
Subject: [PATCH] MinGW TLS Support

---
 libphobos/libdruntime/Makefile.am                 |  3 +-
 libphobos/libdruntime/Makefile.in                 |  3 +-
 libphobos/libdruntime/core/sys/windows/mingwasm.S | 35 +++++++++
 libphobos/libdruntime/core/thread.d               | 93 ++++++++++++++++++++++-
 4 files changed, 130 insertions(+), 4 deletions(-)
 create mode 100644 libphobos/libdruntime/core/sys/windows/mingwasm.S

diff --git a/libphobos/libdruntime/Makefile.am b/libphobos/libdruntime/Makefile.am
index b34dbb7..928feb7 100644
--- a/libphobos/libdruntime/Makefile.am
+++ b/libphobos/libdruntime/Makefile.am
@@ -129,7 +129,8 @@ RT_POSIX_OBJS=core/sys/posix/dirent.o core/sys/posix/netdb.o \
 
 RT_WINDOWS_OBJS=core/sys/windows/dbghelp.o core/sys/windows/dll.o \
 		core/sys/windows/stacktrace.o core/sys/windows/threadaux.o \
-		core/sys/windows/windows.o core/sys/windows/mingwex.o
+		core/sys/windows/windows.o core/sys/windows/mingwex.o \
+		core/sys/windows/mingwasm.o
 
 D_GC_MODULES=@D_GC_MODULES@
 
diff --git a/libphobos/libdruntime/Makefile.in b/libphobos/libdruntime/Makefile.in
index 74ea001..04d11e4 100644
--- a/libphobos/libdruntime/Makefile.in
+++ b/libphobos/libdruntime/Makefile.in
@@ -276,7 +276,8 @@ RT_POSIX_OBJS = core/sys/posix/dirent.o core/sys/posix/netdb.o \
 
 RT_WINDOWS_OBJS = core/sys/windows/dbghelp.o core/sys/windows/dll.o \
 		core/sys/windows/stacktrace.o core/sys/windows/threadaux.o \
-		core/sys/windows/windows.o core/sys/windows/mingwex.o
+		core/sys/windows/windows.o core/sys/windows/mingwex.o \
+		core/sys/windows/mingwasm.o
 
 
 # Regardless of OS, all import headers are generated.
diff --git a/libphobos/libdruntime/core/sys/windows/mingwasm.S b/libphobos/libdruntime/core/sys/windows/mingwasm.S
new file mode 100644
index 0000000..49b5918
--- /dev/null
+++ b/libphobos/libdruntime/core/sys/windows/mingwasm.S
@@ -0,0 +1,35 @@
+/**
+ * Support code for MinGW fibers.
+ */
+ 	.global	_fiber_switchContext
+_fiber_switchContext:
+	// Save current stack state.save current stack state
+	// Standard CDECL prologue.  
+	push %EBP;
+	mov  %ESP, %EBP;
+	push %EDI;
+    push %ESI;
+    push %EBX;
+    push %FS:0;
+    push %FS:4;
+    push %FS:8;
+    push %EAX;
+
+    // store oldp again with more accurate address
+    mov 8(%EBP), %EAX;
+    mov %ESP, (%EAX);
+    // load newp to begin context switch
+    mov 12(%EBP), %ESP;
+
+    // load saved state from new stack
+    pop %EAX;
+    pop %FS:8;
+    pop %FS:4;
+    pop %FS:0;
+    pop %EBX;
+    pop %ESI;
+    pop %EDI;
+    pop %EBP;
+
+    // 'return' to complete switch
+    ret;
diff --git a/libphobos/libdruntime/core/thread.d b/libphobos/libdruntime/core/thread.d
index 8b77118..75d871a 100644
--- a/libphobos/libdruntime/core/thread.d
+++ b/libphobos/libdruntime/core/thread.d
@@ -3352,10 +3352,99 @@ private
                 jmp RCX;
             }
         }
-        else version(MinGW)
+        else version( GNU_AsmX86_Windows )
         {
-            assert(0, "unimplemented");
+			// This requires function prologue to be generated.
+			// However, gcc -O2 will avoid this making this unusable here.
+			static assert(false, "fiber_switchContext should be AsmExternal");
+            asm 
+            {   "
+                // save current stack state
+                // Standard prologue.  
+                //push %%EBP;
+                //mov  %%ESP, %%EBP;
+                push %%EDI;
+                push %%ESI;
+                push %%EBX;
+                push %%FS:0;
+                push %%FS:4;
+                push %%FS:8;
+                push %%EAX;
+
+                // store oldp again with more accurate address
+                mov 8(%%EBP), %%EAX;
+                mov %%ESP, (%%EAX);
+                // load newp to begin context switch
+                mov 12(%%EBP), %%ESP;
+
+                // load saved state from new stack
+                pop %%EAX;
+                pop %%FS:8;
+                pop %%FS:4;
+                pop %%FS:0;
+                pop %%EBX;
+                pop %%ESI;
+                pop %%EDI;
+                pop %%EBP;
+
+                // 'return' to complete switch
+                ret;
+                "
+                : /* outputs */
+                : /* inputs */
+                : /* clobbers */
+                ;
+            }
         }
+        else version( GNU_AsmX86_64_Windows )
+        {
+			// This requires function prologue to be generated.
+			// However, gcc -O2 will avoid this making this unusable
+			// This makes this block unusuable.
+			static assert(false, "fiber_switchContext should be AsmExternal");
+            asm 
+            {   "
+                // save current stack state
+                // Standard prologue
+                //pushq %%RBP;
+                //movq  %%RSP, %%RBP;
+                pushq %%RBX;
+                pushq %%R12;
+                pushq %%R13;
+                pushq %%R14;
+                pushq %%R15;
+                pushq %%GS:0;
+                pushq %%GS:8;
+                pushq %%GS:16;
+
+                // store oldp
+                movq %%RSP, (%%RCX);
+                // load newp to begin context switch
+                movq %%RDX, %%RSP;
+
+                // load saved state from new stack
+                popq %%GS:16;
+                popq %%GS:8;
+                popq %%GS:0;
+                popq %%R15;
+                popq %%R14;
+                popq %%R13;
+                popq %%R12;
+                popq %%RBX;
+                popq %%RBP;
+
+                // 'return' to complete switch
+                popq %%RCX;
+                jmp *%%RCX;
+                "
+                : /* outputs */
+                : /* inputs */
+                : /* clobbers */ 
+                ;
+            }
+
+//            assert(false, "x86-64 stub");
+        }	
         else static if( __traits( compiles, ucontext_t ) )
         {
             Fiber   cfib = Fiber.getThis();
-- 
1.9.2.msysgit.0

